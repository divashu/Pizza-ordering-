workflows:
  android-debug-java:
    name: Android Debug (no Kotlin, new Gradle DSL)
    max_build_duration: 40
    environment:
      flutter: 3.35.6
      java: 17
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - ~/.gradle/caches
    scripts:
      - echo "Versions:" && flutter --version && java -version

      # Regenerate Android host in Java (no Kotlin plugin)
      - flutter create . --platforms=android -a java --org com.example --overwrite

      - flutter pub get
      - yes | sdkmanager --licenses || true

      # ---- settings.gradle (plugin DSL + includeBuild for Flutter tools)
      - |
        cat > android/settings.gradle <<'EOF'
        pluginManagement {
          def flutterSdkPath = System.getenv("FLUTTER_ROOT")
          if (flutterSdkPath == null && file("local.properties").exists()) {
            def props = new Properties()
            file("local.properties").withInputStream { props.load(it) }
            flutterSdkPath = props.getProperty("flutter.sdk")
          }
          if (flutterSdkPath == null) {
            throw new GradleException("Flutter SDK not found. Set FLUTTER_ROOT or flutter.sdk in local.properties")
          }
          includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")
          repositories { google(); mavenCentral(); gradlePluginPortal() }
        }
        plugins { id "dev.flutter.flutter-plugin-loader" }
        include(":app")
        EOF

      # ---- Root android/build.gradle (AGP only)
      - |
        cat > android/build.gradle <<'EOF'
        plugins {
          id "com.android.application" version "8.6.1" apply false
          id "dev.flutter.flutter-plugin-loader" apply false
        }
        EOF

      # ---- Module android/app/build.gradle (no Kotlin plugin)
      - |
        cat > android/app/build.gradle <<'EOF'
        plugins {
          id "com.android.application"
          id "dev.flutter.flutter-gradle-plugin"
        }

        android {
          namespace "com.example.pizza_ordering"
          compileSdk 34

          defaultConfig {
            applicationId "com.example.pizza_ordering"
            minSdk 21
            targetSdk 34
            versionCode 1
            versionName "1.0"
            multiDexEnabled true
          }

          buildTypes {
            release {
              minifyEnabled false
              signingConfig signingConfigs.debug
            }
          }

          compileOptions {
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
          }
        }

        flutter { source '../..' }
        EOF

      # ---- Build (Flutter will print the exact output path at the end)
      - flutter build apk --debug -v

      # ---- Show and collect whatever got produced (APK/AAB) into artifacts/
      - |
        echo "==== Searching for APK/AABs ===="
        find build -type f \( -name "*.apk" -o -name "*.aab" \) -print || true
        find android -type f \( -name "*.apk" -o -name "*.aab" \) -print || true

        echo "==== Copying to artifacts/ ===="
        mkdir -p artifacts
        # Copy from both common Flutter & Gradle locations
        find build android -type f \( -name "*.apk" -o -name "*.aab" \) -exec cp -v {} artifacts/ \; || true

        echo "==== Final artifact list ===="
        ls -lah artifacts || true

    artifacts:
      # Always publish whatever we gathered
      - artifacts/*.apk
      - artifacts/*.aab
      # (Optional) Also try the usual paths directly
      - build/**/outputs/**/*.apk
      - android/**/build/outputs/**/*.apk
